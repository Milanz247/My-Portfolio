name: Deploy Frontend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.0.11

      - name: Install dependencies
        run: bun install

      - name: Build Next.js app
        run: bun run build

      # Debug: Check build output (only on failure or when debugging)
      - name: List build directory
        if: always()
        run: |
          echo "Build directory contents:"
          ls -la build/
          echo "Build directory size:"
          du -sh build/
          echo "Sample files:"
          find build/ -type f -name "*.html" -o -name "*.css" -o -name "*.js" | head -5

      # Debug: Test server connectivity (only run if previous steps failed)
      - name: Test server connectivity
        if: failure()
        run: |
          echo "Testing connectivity to server..."
          ping -c 3 ${{ secrets.FTP_SERVER }} || echo "Ping failed"
          echo "Testing SSH/SFTP port (22)..."
          nc -zv ${{ secrets.FTP_SERVER }} 22 || echo "Port 22 not accessible"
          echo "Testing FTP port (21)..."
          nc -zv ${{ secrets.FTP_SERVER }} 21 || echo "Port 21 not accessible"

      - name: Upload to server via SFTP (Safe deployment)
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ secrets.FTP_USERNAME }}
          server: ${{ secrets.FTP_SERVER }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22
          local_path: './build/*'
          remote_path: '/home/techcue360-milan-dev/htdocs/milan-dev.techcue360.com/temp_deploy/'
          args: '-o ConnectTimeout=10 -o ServerAliveInterval=15 -o ServerAliveCountMax=3'
          sftp_only: false
          delete_remote_files: false

      # Move files from temp to live directory safely
      - name: Activate deployment safely
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22
          script: |
            set -e  # Exit on any error
            cd /home/techcue360-milan-dev/htdocs/milan-dev.techcue360.com/
            
            # Verify temp directory exists and has content
            if [ ! -d "temp_deploy" ] || [ -z "$(ls -A temp_deploy 2>/dev/null)" ]; then
              echo "Error: temp_deploy directory is missing or empty"
              exit 1
            fi
            
            # Create timestamped backup of current site
            BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
            if [ "$(ls -A . 2>/dev/null | grep -v temp_deploy | grep -v backup_)" ]; then
              echo "Creating backup: $BACKUP_DIR"
              mkdir -p "$BACKUP_DIR"
              find . -maxdepth 1 -type f -exec cp {} "$BACKUP_DIR/" \; 2>/dev/null || true
              find . -maxdepth 1 -type d ! -name "." ! -name "temp_deploy" ! -name "backup_*" -exec cp -r {} "$BACKUP_DIR/" \; 2>/dev/null || true
            fi
            
            # Remove old files (except backups and temp)
            echo "Removing old files..."
            find . -maxdepth 1 -type f ! -name "backup_*" -delete 2>/dev/null || true
            find . -maxdepth 1 -type d ! -name "." ! -name "temp_deploy" ! -name "backup_*" -exec rm -rf {} \; 2>/dev/null || true
            
            # Move new files from temp to live (atomic operation)
            echo "Deploying new files..."
            mv temp_deploy/* . 2>/dev/null || true
            mv temp_deploy/.[^.]* . 2>/dev/null || true  # Move hidden files too
            rmdir temp_deploy 2>/dev/null || true
            
            # Set proper permissions
            echo "Setting permissions..."
            find . -type f -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.json" -o -name "*.txt" -o -name "*.ico" -o -name "*.svg" -o -name "*.png" -o -name "*.jpg" -o -name "*.woff*" | xargs chmod 644 2>/dev/null || true
            find . -type d ! -name "backup_*" -exec chmod 755 {} \; 2>/dev/null || true
            
            # Clean up old backups (keep only last 5)
            echo "Cleaning up old backups..."
            ls -t backup_* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true
            
            echo "Deployment completed successfully!"

      # Verify deployment
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 10
          
          # Check if the site is accessible
          SITE_URL="https://milan-dev.techcue360.com"
          echo "Testing site accessibility: $SITE_URL"
          
          # Try to fetch the homepage
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Deployment verified! Site is accessible (HTTP $HTTP_STATUS)"
          else
            echo "⚠️ Warning: Site returned HTTP $HTTP_STATUS (this might be normal if DNS is still propagating)"
          fi
          
          # Check if essential files exist (if we can access the server)
          echo "Deployment verification completed."